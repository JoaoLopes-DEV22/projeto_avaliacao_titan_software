# .github/scripts/reviewer.py

import os
import sys
import subprocess
import google.generativeai as genai
from github import Github

def main():
    """
    Fun√ß√£o principal que orquestra o processo de revis√£o de c√≥digo.
    """
    # --- CONFIGURA√á√ÉO E OBTEN√á√ÉO DE DADOS ---
    try:
        github_token = os.environ['GITHUB_TOKEN']
        gemini_api_key = os.environ['GEMINI_API_KEY']
        pr_number = int(os.environ['PR_NUMBER'])
        repo_name = os.environ['GITHUB_REPOSITORY']
        base_sha = os.environ['BASE_SHA']
        head_sha = os.environ['HEAD_SHA']
    except KeyError as e:
        print(f"Erro: A vari√°vel de ambiente {e} n√£o foi definida.")
        sys.exit(1)

    # Configurar a API do Gemini
    try:
        genai.configure(api_key=gemini_api_key)
        llm = genai.GenerativeModel('gemini-1.5-flash')
    except Exception as e:
        print(f"Erro ao configurar a API do Gemini: {e}")
        sys.exit(1)

    print("Iniciando o processo de revis√£o de c√≥digo por IA...")

    # --- OBTEN√á√ÉO DO DIFF DO C√ìDIGO ---
    code_diff = get_code_diff(base_sha, head_sha)
    if not code_diff:
        print("N√£o foi poss√≠vel obter o diff do c√≥digo. Encerrando.")
        sys.exit(1)

    # --- AN√ÅLISE PELA IA ---
    print("Diff obtido. Solicitando revis√£o da IA...")
    ai_feedback = get_ai_review(llm, code_diff)
    if not ai_feedback:
        print("N√£o foi poss√≠vel obter feedback da IA. Encerrando.")
        sys.exit(1)

    # --- POSTAGEM DO COMENT√ÅRIO NO PR ---
    final_comment = f"### ü§ñ Revis√£o Autom√°tica por IA\n\n{ai_feedback}"
    post_comment_on_pr(github_token, repo_name, pr_number, final_comment)

    # --- VEREDITO FINAL (PASS/FAIL) ---
    print("Analisando o veredito da IA para o status check...")
    if "[STATUS: FAIL]" in ai_feedback:
        print("!!! Veredito da IA: REJEITADO. Encontrados problemas cr√≠ticos.")
        sys.exit(1)  # Falha o workflow para bloquear o merge
    elif "[STATUS: PASS]" in ai_feedback:
        print("Veredito da IA: APROVADO. Nenhum problema cr√≠tico encontrado.")
        sys.exit(0)  # Workflow conclu√≠do com sucesso
    else:
        print("AVISO: N√£o foi poss√≠vel determinar um status [PASS/FAIL] claro na resposta da IA.")
        # Decide se deve falhar ou passar por padr√£o. Passar √© mais seguro para n√£o bloquear indevidamente.
        sys.exit(0)

def get_code_diff(base_sha, head_sha):
    """
    Obt√©m o diff do c√≥digo entre o branch base e o head do PR usando o git.
    """
    try:
        diff_command = ["git", "diff", f"{base_sha}...{head_sha}"]
        result = subprocess.run(diff_command, capture_output=True, text=True, check=True)
        return result.stdout
    except subprocess.CalledProcessError as e:
        print(f"Erro ao obter o diff do c√≥digo: {e}\n{e.stderr}")
        return None

def get_ai_review(llm, diff_text):
    """
    Envia o diff para o LLM e pede uma revis√£o de c√≥digo estruturada.
    """
    if not diff_text or len(diff_text.encode('utf-8')) > 1000000: # Limite de seguran√ßa
        print("Diff muito grande ou vazio. Pulando revis√£o da IA.")
        return "O diff do c√≥digo √© muito grande ou est√° vazio para ser analisado pela IA."

    prompt = f"""
    Voc√™ √© um revisor de c√≥digo s√™nior de Python, extremamente rigoroso, especializado em encontrar bugs e vulnerabilidades de seguran√ßa.
    Sua tarefa √© revisar o seguinte 'diff' de um pull request.

    Analise os seguintes pontos com aten√ß√£o m√°xima:
    1.  **Vulnerabilidades de Seguran√ßa CR√çTICAS:** Inje√ß√£o de SQL, vazamento de segredos, falhas de autentica√ß√£o, etc.
    2.  **Bugs L√≥gicos GRAVES:** Condi√ß√µes de corrida, loops infinitos, l√≥gica que pode levar a crashes.
    3.  **M√°s Pr√°ticas S√âRIAS:** Uso de bibliotecas depreciadas, c√≥digo excessivamente complexo que pode esconder bugs.

    Forne√ßa seu feedback em formato Markdown, sendo construtivo mas direto.

    **IMPORTANTE:** No final da sua revis√£o, adicione uma linha de status.
    - Se voc√™ encontrar QUALQUER vulnerabilidade de seguran√ßa, bug grave ou m√° pr√°tica s√©ria, termine com a linha: `[STATUS: FAIL]`
    - Se o c√≥digo estiver limpo, seguro e seguir as boas pr√°ticas, termine com a linha: `[STATUS: PASS]`

    Aqui est√° o diff do c√≥digo:
    ```diff
    {diff_text}
    ```

    Sua revis√£o (terminando com a linha de status):
    """

    try:
        response = llm.generate_content(prompt)
        return response.text
    except Exception as e:
        print(f"Erro ao chamar a API do Gemini: {e}")
        return f"Desculpe, ocorreu um erro ao tentar revisar o c√≥digo com a IA. Detalhes: {e}\n\n[STATUS: FAIL]"

def post_comment_on_pr(token, repo_name, pr_number, comment_body):
    """
    Posta o feedback como um coment√°rio no Pull Request.
    """
    try:
        g = Github(token)
        repo = g.get_repo(repo_name)
        pr = repo.get_pull(pr_number)
        pr.create_issue_comment(comment_body)
        print("Coment√°rio postado com sucesso no PR.")
    except Exception as e:
        print(f"Erro ao postar o coment√°rio no PR: {e}")
        # N√£o falha a build por n√£o conseguir comentar, a falha do status check √© mais importante.

if __name__ == "__main__":
    main()