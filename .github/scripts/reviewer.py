import os
import sys
import subprocess
import google.generativeai as genai
from github import Github

# --- CONFIGURA√á√ÉO ---
try:
    # Chaves de API e informa√ß√µes do PR via vari√°veis de ambiente
    github_token = os.environ['GITHUB_TOKEN']
    gemini_api_key = os.environ['GEMINI_API_KEY']
    pr_number = int(os.environ['PR_NUMBER'])
    repo_name = os.environ['GITHUB_REPOSITORY']
    base_sha = os.environ['BASE_SHA']
    head_sha = os.environ['HEAD_SHA']
except KeyError as e:
    print(f"Erro: Vari√°vel de ambiente n√£o encontrada - {e}")
    sys.exit(1)

# Configurar a API do Gemini
genai.configure(api_key=gemini_api_key)
llm = genai.GenerativeModel('gemini-1.5-flash') # ou um modelo mais avan√ßado

# --- FUN√á√ïES ---

def get_code_diff():
    """Obt√©m o diff do c√≥digo entre o branch base e o head do PR."""
    try:
        # Usando git para obter o diff, que √© o formato ideal para an√°lise de PR
        diff_command = ["git", "diff", f"{base_sha}...{head_sha}"]
        result = subprocess.run(diff_command, capture_output=True, text=True, check=True)
        return result.stdout
    except subprocess.CalledProcessError as e:
        print(f"Erro ao obter o diff do c√≥digo: {e}")
        return None

def run_static_analysis(diff_text):
    """
    (Opcional, mas recomendado)
    Aqui voc√™ poderia adicionar an√°lise est√°tica com Flake8, Bandit, etc.
    Por simplicidade, este exemplo focar√° na revis√£o por IA.
    """
    # Exemplo: Poderia rodar o Bandit nos arquivos alterados.
    # Por agora, retornamos uma string vazia.
    return ""

def get_ai_review(diff_text):
    """Envia o diff para o LLM e pede uma revis√£o de c√≥digo."""
    if not diff_text or len(diff_text) > 30000: # Limite de seguran√ßa para o tamanho do diff
        print("Diff muito grande ou vazio. Pulando revis√£o da IA.")
        return "O diff do c√≥digo √© muito grande para ser analisado pela IA ou est√° vazio."

    # Este √© o "prompt engineering" - a parte mais importante!
    prompt = f"""
    Voc√™ √© um revisor de c√≥digo s√™nior de Python, especializado em encontrar bugs,
    vulnerabilidades de seguran√ßa e garantir as melhores pr√°ticas.
    Sua tarefa √© revisar o seguinte 'diff' de um pull request.

    Forne√ßa seu feedback em formato Markdown.
    Se n√£o houver problemas, elogie o autor.
    Se houver problemas, seja construtivo e claro.
    Foque nos seguintes pontos:
    1.  **Vulnerabilidades de Seguran√ßa:** Inje√ß√£o de SQL, XSS, segredos hardcoded, etc.
    2.  **Bugs L√≥gicos:** Condi√ß√µes de corrida, erros de l√≥gica, null pointer exceptions.
    3.  **Boas Pr√°ticas:** C√≥digo limpo, legibilidade, simplicidade (KISS), n√£o se repita (DRY).
    4.  **Performance:** Loops ineficientes, queries de banco de dados desnecess√°rias.
    5.  **Estilo de C√≥digo:** Conformidade com a PEP 8, mas foque mais nos problemas l√≥gicos do que em estilo.

    Aqui est√° o diff do c√≥digo:
    ```diff
    {diff_text}
    ```

    Por favor, forne√ßa sua revis√£o:
    """

    try:
        response = llm.generate_content(prompt)
        return response.text
    except Exception as e:
        print(f"Erro ao chamar a API do Gemini: {e}")
        return f"Desculpe, ocorreu um erro ao tentar revisar o c√≥digo com a IA. Detalhes: {e}"

def post_comment_on_pr(comment_body):
    """Posta o feedback como um coment√°rio no Pull Request."""
    try:
        g = Github(github_token)
        repo = g.get_repo(repo_name)
        pr = repo.get_pull(pr_number)
        pr.create_issue_comment(comment_body)
        print("Coment√°rio postado com sucesso no PR.")
    except Exception as e:
        print(f"Erro ao postar o coment√°rio no PR: {e}")
        sys.exit(1)

# --- EXECU√á√ÉO PRINCIPAL ---

if __name__ == "__main__":
    print("Iniciando o processo de revis√£o de c√≥digo por IA...")

    code_diff = get_code_diff()

    if not code_diff:
        print("N√£o foi poss√≠vel obter o diff do c√≥digo. Encerrando.")
        sys.exit(1)

    print("Diff obtido. Solicitando revis√£o da IA...")
    ai_feedback = get_ai_review(code_diff)

    # (Opcional) Combine o feedback da IA com a an√°lise est√°tica
    static_feedback = run_static_analysis(code_diff)
    
    final_comment = f"### ü§ñ Revis√£o Autom√°tica por IA\n\n"
    final_comment += f"{ai_feedback}\n\n"
    
    if static_feedback:
        final_comment += f"--- \n### üîç An√°lise Est√°tica\n\n{static_feedback}"
        
    final_comment += "\n\n*Este coment√°rio foi gerado por uma IA. Verifique as sugest√µes antes de aplic√°-las.*"

    post_comment_on_pr(final_comment)
    print("Revis√£o conclu√≠da.")